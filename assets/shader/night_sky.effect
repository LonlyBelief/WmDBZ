// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        starNum: {value: 10.0}
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>
  #include <cc-global.chunk>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;

  uniform Pos {
    float starNum;
  };
  #endif

  float random(vec2 st){
    return fract(sin(dot(st.xy, vec2(565656.233,123123.2033))) * 323434.34344);
  }

  vec2 random2(vec2 p){
    return fract(sin(vec2(dot(p,vec2(234234.1,54544.7)), sin(dot(p,vec2(33332.5,18563.3))))) *323434.34344);
  }

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    vec2 uv = v_uv0;
    uv *= starNum;
    vec2 ipos = floor(uv);
    vec2 fpos = fract(uv);

    vec2 targetPoint = random2(ipos);
    float dist = length(fpos - targetPoint);
    float brightness = sin( 36. - cc_time.x / 36. + 6.28321 * targetPoint.x);
    vec3 color = vec3(1. - step(0.013,dist)) * brightness;
    // vec3 color = vec3(random(ipos));

    #if USE_TEXTURE
      CCTexture(texture, v_uv0, o);
    #endif

    // o *= v_color;
    o = vec4(color,1.0);

    ALPHA_TEST(o);

    gl_FragColor = o;
  }
}%
